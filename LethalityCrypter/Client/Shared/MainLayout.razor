@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject LethalityCrypter.Client.Providers.ICookie cookie

@if (LethalityCrypter.Client.Providers.AuthProvider.CurrentUser != null)
{
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div>
            @Body
        </div>
    </div>
}

else
{
    #region Login
    if (!WantRegister)
    {
        <div class="container-md">
            <div class="row vh-100 d-flex justify-content-center">
                <div class="col-12 align-self-center">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-4 mx-auto">
                                <div class="card">
                                    <div class="card-body pt-0">
                                        <div class="my-4">
                                            <div class="form-group mb-2">
                                                <label class="form-label" for="username">Mail</label>
                                                <input type="email" class="form-control" id="mail" name="mail" placeholder="Type your username" @bind="@Mail" @oninput="@((e) => { Mail = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group">
                                                <label class="form-label" for="userpassword">Password</label>
                                                <input type="password" class="form-control" name="password" id="userpassword" placeholder="Type your password" @bind="@Password" @oninput="@((e) => { Password = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group mb-0 row">
                                                <div class="col-12">
                                                    <div class="d-grid mt-3">
                                                        <button class="btn btn-primary" @onclick="Login" data-toggle="modal" data-target="#exampleModalCenter">Login <i class="fas fa-sign-in-alt ms-1"></i></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="m-3 text-center text-muted">
                                            <a class="mb-0" @onclick="((e) => { WantRegister = true; })" href="">Do you want register?</a>
                                        </div>

                                        @if (Error)
                                        {
                                            <hr class="hr-dashed mt-4">
                                            <h4 class="fw-semibold text-danger font-18 text-center">@ErrorMessage</h4>
                                        }
                                    </div><!--end card-body-->
                                </div><!--end card-->
                            </div><!--end col-->
                        </div><!--end row-->
                    </div><!--end card-body-->
                </div><!--end col-->
            </div><!--end row-->
        </div><!--end container-->
    }
    #endregion

    #region Register
    else
    {
        <div class="container-md">
            <div class="row vh-100 d-flex justify-content-center">
                <div class="col-12 align-self-center">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-4 mx-auto">
                                <div class="card">
                                    <div class="card-body pt-0">
                                        <div class="my-4">
                                            <div class="form-group mb-2">
                                                <label class="form-label" for="username">Mail</label>
                                                <input type="email" class="form-control" id="mail" name="mail" placeholder="Type your mail" @bind="@Mail" @oninput="@((e) => { Mail = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group mb-2">
                                                <label class="form-label" for="username">Display Name</label>
                                                <input type="email" class="form-control" id="displayname" name="displayname" placeholder="Type your name" @bind="@DisplayName" @oninput="@((e) => { DisplayName = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group mb-2">
                                                <label class="form-label" for="userpassword">Password</label>
                                                <input type="password" class="form-control" name="password" id="password" placeholder="Type your password" @bind="@Password" @oninput="@((e) => { Password = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group mb-2">
                                                <label class="form-label" for="userpassword">Password Again</label>
                                                <input type="password" class="form-control" name="passwordagain" id="passwordagain" placeholder="Type your pasword again" @bind="@PasswordAgain" @oninput="@((e) => { PasswordAgain = (string)e.Value;})" />
                                            </div>

                                            <div class="form-group mb-0 row">
                                                <div class="col-12">
                                                    <div class="d-grid mt-3">
                                                        <button class="btn btn-primary" @onclick="Register" data-toggle="modal" data-target="#exampleModalCenter">Register <i class="fas fa-sign-in-alt ms-1"></i></button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="m-3 text-center text-muted">
                                            <a class="mb-0" @onclick="((e) => { WantRegister = false; })" href="">Do you want login?</a>
                                        </div>

                                        @if (Error)
                                        {
                                            <hr class="hr-dashed mt-4">
                                            <h4 class="fw-semibold text-danger font-18 text-center">@ErrorMessage</h4>
                                        }
                                    </div><!--end card-body-->
                                </div><!--end card-->
                            </div><!--end col-->
                        </div><!--end row-->
                    </div><!--end card-body-->
                </div><!--end col-->
            </div><!--end row-->
        </div><!--end container-->
    }
    #endregion
}

@code {
    private string Mail { get; set; }

    private string Password { get; set; }
    private string PasswordAgain { get; set; }
    private string DisplayName { get; set; }

    private bool Error { get; set; }

    private string ErrorMessage { get; set; }

    public bool WantRegister { get; set; } = false;

    private async Task Login()
    {
        var result = await LethalityCrypter.Client.Providers.AuthProvider.LoginAsync(Mail, Password);

        if(LethalityCrypter.Client.Providers.AuthProvider.CurrentUser != null)
        {
            await cookie.SetValue("id", result, 999);
        }
        else
        {
            ErrorMessage = result;
            Error = true;
        }
    }

    private async Task Register()
    {
        if (Password == PasswordAgain)
        {
            var result = await LethalityCrypter.Client.Providers.AuthProvider.RegisterAsync(Mail, Password, DisplayName);

            GiveError(result);
        }
        else GiveError("Please check your passwords. They are not equal.");

    }


    private void GiveError(string message)
    {
        ErrorMessage = message;
        Error = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await cookie.GetValue("token");
        if(!string.IsNullOrEmpty(token))
        {
            LethalityCrypter.Client.Providers.AuthProvider.CurrentUser = await LethalityCrypter.Client.Providers.AuthProvider.Auth.GetUserAsync(token);
            await cookie.DeleteCookie("token");
        }
    }
}

<style>
    app {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .top-row {
        height: 3.5rem;
        display: flex;
        align-items: center;
    }

    .main {
        flex: 1;
    }

        .main .top-row {
            background-color: #f7f7f7;
            border-bottom: 1px solid #d6d5d5;
            justify-content: flex-end;
        }

            .main .top-row a:first-child {
                overflow: hidden;
                text-overflow: ellipsis;
            }

    .sidebar .oi {
        width: 2rem;
        font-size: 1.1rem;
        vertical-align: text-top;
        top: -2px;
    }

    .content {
        padding-top: 1.1rem;
    }

    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }

    #blazor-error-ui {
        background: lightyellow;
        bottom: 0;
        box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
        display: none;
        left: 0;
        padding: 0.6rem 1.25rem 0.7rem 1.25rem;
        position: fixed;
        width: 100%;
        z-index: 1000;
    }

        #blazor-error-ui .dismiss {
            cursor: pointer;
            position: absolute;
            right: 0.75rem;
            top: 0.5rem;
        }

    @@media (max-width: 767.98px) {
        .main .top-row:not(.auth) {
            display: none;
        }

        .main .top-row.auth {
            justify-content: space-between;
        }

        .sidebar {
            display: none
        }
    }

    @@media (min-width: 768px) {
        app {
            flex-direction: row;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }

        .main .top-row {
            position: sticky;
            top: 0;
        }

        .main > div {
            padding-left: 2rem !important;
            padding-right: 1.5rem !important;
        }

        .sidebar .collapse {
            /* Never collapse the sidebar for wide screens */
            display: block;
        }
    }
</style>
